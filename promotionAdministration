;<<1 1200  /GM-Root(Globalny moderator - Root  _$$$_3 ,"System punktacji awansu" >>//Administracji

class User: #punktacja uzytkownika do statusu superUser


"System punktacji awansu" >>
 <function !Edit </edycja wzoru projektu uzytkownika> = +1pkt+VerifyAuthor+2pkt
 function !ReportUser <zgloszenie niestosownej intonacji projektu/profilu> +1pkt+Verify<@M>=true=1+2pkt
 function !reportCode <Zgloszenie szkodliwych linijek> 2pkt+V@verify=2+2pkt
 function !BugReports <System ticketow zgloszenie Bledow> 5pkt+V@+3pkt
 function !InjectMe <Wdrozenie swojej osoby do projektu> 7pkt+[ativity100History*]+1action=1pkt
 function !InjectIdea <wdrozenie pomyslu do projektu> 8pkt+ 10do3/1pkt<max33Pkt for this category)
 function !GiveIdea <Projekt wdrozenia samorozwojowego> 6pkt+V@+ValidPass=15pkt
 function !GiveSuggest_a_solution <Propozycja rozwiazania problemu (projektowego) 10+VerifyAuthor+ValidPass=18pkt
 function !EditReadySource_and_inject_Him <Edycja+wdrozenie> =@M<[...] 
 function !InjectYourVersion +VerifyValid +class pass =J@  >
 function !scale Point
    function <1/14  * 14/28 ** 28/42 *** 42/56 **** 56/70 ***** 70/84 ****** 84/98 *******
			  User    User > @M         @M           @GM         @GM           @GM<J@
!class awansu 3/42     42/84   84/126   126/168     168/210     210/252      252/294			
 function !Penalty_points =2senil od 11senil= Retourn 1loop
 function !trustfactor  100-10=0.1 90-10=0.2 80-10=0.3 70-10=0.4  60-10=0.5 50-10=0.6 40-10=0.7 30-10=0.8 20-10=FlooderStatus (Limitation of activity opportunities) 10-10=Ban 72hour
 function <0.0=Green 0.1 Green 0.2 Green 0.3 Green> !FullFreeWork 
 function <0.4=orange 0.5 Orange 0.6 Orange> !FullWork !Stay.control.activity <!without:_verification>
 function <0.7 orange/red !control !verifikation 0.8 Red/orange !control !verifikation !lock _workplace/v/test
 function <0.9<LockProgress> 1.0=BanStatus RED>  Echo
 function porozumienie \  madrosc rozum   /     konwersacja
 function          /\    /\    /\    /\          /
 function         /  \  /  \  /  \  /  \        /
 function        /    \/    \/    \/    \      /
 function       /     /\    /\    /\     \    /
 function      /     /  \  /  \  /  \     \  /
 function     /     /    \/    \/    \     \/
 function wspolnie rozwazanie decyzji /  serce rozsadek    \        wspolne decyzje
 function
 function
 function

class TrustFactorManager: #wspolczynnik zaufania
    def __init__(self, owner_id):
        self.owner_id = owner_id
        self.trust_factors = {chr(i): 0 for i in range(ord('B'), ord('Z') + 1)}

    def edit_trust_factor(self, flag, points, user_id):
        if user_id != self.owner_id:
            print(f"Access denied for user {user_id}. Tylko administracja powyzej siodmego poziomu uprawnien moze edytowac wspolczynnik zaufania.")
            return
        
        if flag in self.trust_factors:
            self.trust_factors[flag] = points
            print(f"Trust factor for flag {flag} updated to {points}.")
        else:
            print(f"Invalid flag: {flag}. Please provide a flag from B to Z.")

    def display_trust_factors(self):
        for flag, points in self.trust_factors.items():
            print(f"Flag {flag}: Trust Factor {points}")

# Example usage
owner_id = "Alex1947PL"
manager = TrustFactorManager(XQBJ)



# Owner edits Trust Factor (example user_id: "your_unique_id")
manager.edit_trust_factor('B', 10, owner_id)  # Should update Trust Factor

# Display all Trust Factors
manager.display_trust_factors()
    
    class TrustFactorManager: #wspolczynnik zaufania administracji
    def __init__(self, owner_id):
        self.owner_id = owner_id
        self.trust_factors = {}
        self.user_classes = {}
        self.special_flag = '€'
        self.minimum_class = 'moderator'

    def add_user(self, user_id, user_class, flag=None):
        self.user_classes[user_id] = {"class": user_class, "flag": flag}
        self.trust_factors[user_id] = 0

    def edit_trust_factor(self, user_id, points, editor_id):
        if editor_id != self.owner_id:
            print(f"Access denied for user {editor_id}. Only the owner can edit trust factors.")
            return
        
        if self.is_trust_factor_eligible(user_id):
            self.trust_factors[user_id] = points
            print(f"Trust factor for user {user_id} updated to {points}.")
        else:
            print(f"User {user_id} is not eligible for a trust factor.")

    def is_trust_factor_eligible(self, user_id):
        user_info = self.user_classes.get(user_id)
        if not user_info:
            return False
        if user_info["class"] in [self.minimum_class, 'admin', 'superadmin'] or user_info["flag"] == self.special_flag:
            return True
        return False

    def display_trust_factors(self):
        for user_id, points in self.trust_factors.items():
            user_info = self.user_classes[user_id]
            print(f"User {user_id} ({user_info['class']}): Trust Factor {points}")

# Przykład użycia
owner_id = "your_unique_id"
manager = TrustFactorManager(owner_id)

# Dodawanie użytkowników
manager.add_user("user1", "member")
manager.add_user("user2", "moderator")
manager.add_user("user3", "member", "€")
manager.add_user("user4", "admin")

# Edytowanie Trust Factor przez właściciela
manager.edit_trust_factor("user1", 10, owner_id)  # Powinno odmówić dostępu
manager.edit_trust_factor
    